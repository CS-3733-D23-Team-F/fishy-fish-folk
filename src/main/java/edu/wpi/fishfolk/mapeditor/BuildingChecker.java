package edu.wpi.fishfolk.mapeditor;

import java.util.ArrayList;
import javafx.geometry.Point2D;
import javafx.scene.shape.Polygon;

public class BuildingChecker {

  private ArrayList<BuildingRegion> shapiroBuilding;
  private ArrayList<BuildingRegion> btmBuilding;
  private ArrayList<BuildingRegion> towerBuilding;

  private ArrayList<BuildingRegion> f15Building;

  private ArrayList<BuildingRegion> f45Building;

  private ArrayList<ArrayList<BuildingRegion>> buildings;

  private BuildingRegion shapiroFloor1, shapiroFloor2, shapiroFloor3, shapiroL1, shapiroL2;
  private BuildingRegion btmFloor1, btmFloor2, btmFloor3, btmL1, btmL2;
  private BuildingRegion towerFloor1, towerFloor2, towerFloor3, towerL1, towerL2;
  private BuildingRegion f15Floor1, f15Floor2, f15Floor3, f15L1, f15L2;
  private BuildingRegion f45Floor1, f45Floor2, f45Floor3, f45L1, f45L2;

  public BuildingChecker() {

    Polygon shapiroPoly1 = new Polygon();
    Polygon shapiroPoly23 = new Polygon();
    Polygon shapiroPolyL1L2 = new Polygon();

    Polygon btmPoly1 = new Polygon();
    Polygon btmPoly23 = new Polygon();
    Polygon btmPolyL1 = new Polygon();
    Polygon btmPolyL2 = new Polygon();

    Polygon towerPoly1 = new Polygon();
    Polygon towerPoly2 = new Polygon();
    Polygon towerPoly3 = new Polygon();
    Polygon towerPolyL1 = new Polygon();
    Polygon towerPolyL2 = new Polygon();

    Polygon f45Poly1 = new Polygon();
    Polygon f45Poly2 = new Polygon();
    Polygon f45Poly3 = new Polygon();
    Polygon f45PolyL1 = new Polygon();
    Polygon f45PolyL2 = new Polygon();

    Polygon f15Poly1 = new Polygon();
    Polygon f15Poly2L1L2 = new Polygon();
    Polygon f15Poly3 = new Polygon();

    shapiroPoly1
        .getPoints()
        .addAll(
            1774.133, 2266.667,
            1095.733, 2263.467,
            1081.333, 1839.467,
            1126.133, 1839.467,
            1129.333, 1799.467,
            1162.933, 1799.467,
            1162.933, 1748.267,
            1270.133, 1753.067,
            1271.733, 1769.067,
            1751.733, 1773.867,
            1751.733, 1799.467,
            1772.533, 1802.667);

    shapiroPoly23
        .getPoints()
        .addAll(
            1114.4, 1742.933,
            1111.2, 2237.333,
            1749.6, 2238.933,
            1751.2, 1741.333);

    shapiroPolyL1L2
        .getPoints()
        .addAll(
            1769.867, 2281.6,
            1638.667, 2280.0,
            1638.667, 2259.2,
            1094.667, 2256.0,
            1083.467, 1881.6,
            1096.267, 1868.799,
            1093.067, 1721.6,
            1157.067, 1694.399,
            1160.267, 1625.6,
            1784.267, 1619.199,
            1769.867, 1710.399);

    btmPoly1
        .getPoints()
        .addAll(
            948.533, 2477.333,
            1022.133, 2474.133,
            1049.333, 2470.933,
            1058.933, 2461.333,
            1490.933, 2458.133,
            1618.933, 2469.333,
            1622.133, 2434.133,
            1676.533, 2443.733,
            1742.133, 2442.133,
            1759.733, 2608.533,
            1780.533, 2608.533,
            1783.733, 2794.133,
            1762.933, 2797.333,
            1762.933, 3096.533,
            929.333, 3098.133,
            975.733, 2722.133,
            948.533, 2562.133);

    btmPoly23
        .getPoints()
        .addAll(
            1114.399, 1742.933,
            1752.799, 1744.533,
            1754.399, 2240.533,
            1114.399, 2237.333);

    btmPolyL1
        .getPoints()
        .addAll(
            936.799, 2460.799,
            1013.599, 2459.2,
            1015.199, 2452.799,
            1554.399, 2455.999,
            1672.799, 2435.2,
            1672.799, 2427.2,
            1735.199, 2430.399,
            1741.6, 2454.399,
            1843.999, 2457.599,
            1845.599, 3113.6,
            1087.199, 3116.799,
            1069.6, 3081.599,
            919.199, 3081.599,
            967.199, 2703.999,
            941.599, 2543.999);

    btmPolyL2
        .getPoints()
        .addAll(
            1019.999, 2457.599,
            1848.799, 2459.2,
            1848.799, 3113.6,
            1091.999, 3115.2,
            1018.399, 2991.999);

    towerPoly1
        .getPoints()
        .addAll(
            1123.733, 1217.067,
            1125.333, 641.067,
            1386.133, 644.267,
            1384.533, 708.267,
            1355.733, 706.667,
            1358.933, 893.867,
            1486.933, 898.667,
            1424.0, 799.99,
            1452.8, 697.599,
            1544.0, 649.599,
            1616.0, 673.599,
            1665.60, 721.599,
            1694.40, 916.79,
            1696.0, 702.399,
            1724.4, 715.199,
            1785.6, 660.799,
            1852.80, 647.999,
            1928.0, 679.999,
            1969.6, 731.199,
            1972.80, 731.199,
            1973.333, 804.267,
            2043.733, 804.267,
            2112.533, 834.667,
            2088.533, 869.867,
            2088.533, 892.267,
            2074.133, 921.067,
            2070.933, 1348.267,
            1352.533, 1340.267,
            1349.333, 1221.867);

    towerPoly2
        .getPoints()
        .addAll(
            1863.2, 788.8,
            1120.8, 1496.0,
            1354.4, 891.2,
            1490.4, 888.0,
            1500.0, 881.6,
            1448.80, 840.0,
            1421.6, 766.4,
            1624.80, 666.666,
            1671.2, 719.466,
            1698.4, 705.066,
            1730.4, 721.066,
            1776.80, 663.467,
            1898.4, 650.667,
            1957.6, 706.667,
            1973.6, 781.867,
            1973.6, 797.867,
            1999.199, 786.667,
            2082.399, 818.667,
            2108.0, 833.067,
            2076.0, 881.067,
            2072.8, 1500.267);

    towerPoly3
        .getPoints()
        .addAll(
            1098.4, 1496.0,
            1306.4, 640.0,
            1336.8, 638.4,
            1370.4, 638.4,
            1370.4, 705.5999999999999,
            1338.4, 707.1999999999999,
            1335.2, 891.1999999999999,
            1456.8000000000002, 894.4,
            1455.2, 878.4,
            1456.8000000000002, 873.5999999999999,
            1428.0, 843.1999999999999,
            1412.0, 804.8,
            1397.6, 796.8,
            1394.4, 790.4,
            1397.6, 775.9999999999999,
            1404.0, 769.5999999999999,
            1415.2, 732.8,
            1429.6, 702.4,
            1426.4, 684.8,
            1437.6, 671.9999999999999,
            1453.6, 678.4,
            1482.4, 659.1999999999999,
            1520.8000000000002, 652.8,
            1532.0, 638.4,
            1546.4, 641.5999999999999,
            1556.0, 655.9999999999999,
            1588.0, 668.8,
            1629.6, 703.9999999999999,
            1644.0, 703.9999999999999,
            1655.2, 718.4,
            1644.0, 732.8,
            1655.2, 767.9999999999999,
            1709.6, 772.8,
            1717.6, 737.5999999999999,
            1711.2, 716.8,
            1720.8000000000002, 700.8,
            1733.6, 702.4,
            1764.0, 676.8,
            1807.2, 654.4,
            1812.0, 641.5999999999999,
            1828.0, 638.4,
            1837.6, 654.4,
            1877.6, 662.4,
            1908.0, 676.8,
            1922.4, 675.1999999999999,
            1935.1999999999998, 689.5999999999999,
            1932.0, 697.5999999999999,
            1949.6, 731.1999999999999,
            1957.6, 772.8,
            1973.6, 791.9999999999999,
            2087.2, 835.1999999999999,
            2087.2, 846.4,
            2116.0, 844.8,
            2111.2, 1496.0,
            1100.0, 1497.6);

    towerPolyL1
        .getPoints()
        .addAll(
            1090.4,
            1537.599999999999,
            1160.8,
            1539.1999999999994,
            1160.8,
            1688.5333333333326,
            1092.0,
            1720.5333333333326,
            1096.8,
            1867.7333333333327,
            1084.0,
            1878.9333333333327,
            1094.667,
            2256.0,
            1083.467,
            1881.6,
            1796.0,
            1540.2666666666662,
            2146.1333333333337,
            1537.0666666666657,
            2151.199999999998,
            594.6666666666663,
            1795.2000000000003,
            1540.2666666666655,
            2150.4,
            1540.2666666666655);

    towerPolyL2
        .getPoints()
        .addAll(
            1796.2666666666667, 1540.266666666666,
            2151.4666666666667, 1537.0666666666662,
            1849.0666666666666, 596.266666666666,
            1849.0666666666666, 565.8666666666659,
            1650.6666666666667, 562.6666666666658,
            1650.6666666666667, 596.266666666666,
            1044.2666666666667, 599.466666666666,
            1089.0666666666666, 1535.4666666666658,
            1089.0666666666666, 1535.4666666666658,
            1159.4666666666667, 1541.8666666666657,
            1094.667, 2256.0,
            1083.467, 1881.6);

    f45Poly1
        .getPoints()
        .addAll(
            2135.733333333333, 833.5999999999999,
            2138.933333333333, 667.1999999999999,
            2170.933333333333, 607.9999999999999,
            2174.133333333333, 583.9999999999999,
            2710.133333333333, 580.8,
            2711.733333333333, 590.4,
            2871.7333333333327, 590.4,
            2871.7333333333327, 591.9999999999999,
            3020.533333333333, 582.4,
            3018.933333333333, 571.1999999999999,
            3142.133333333333, 558.3999999999999,
            3145.333333333333, 571.1999999999999,
            3295.7333333333327, 551.9999999999999,
            3348.533333333333, 771.1999999999999,
            3354.933333333333, 769.5999999999999,
            3374.133333333333, 846.3999999999999,
            3348.533333333333, 852.8,
            3369.333333333333, 932.8,
            3335.7333333333327, 937.5999999999999,
            3335.7333333333327, 1068.8,
            3322.933333333333, 1068.8,
            3295.7333333333327, 1086.3999999999999,
            3281.333333333333, 1086.3999999999999,
            3254.133333333333, 1072.0,
            3247.7333333333327, 1072.0,
            3222.133333333333, 1084.8,
            3204.533333333333, 1084.8,
            3178.933333333333, 1072.0,
            3167.7333333333327, 1072.0,
            3150.133333333333, 1086.3999999999999,
            3130.933333333333, 1088.0,
            3105.333333333333, 1073.6,
            3084.533333333333, 1073.6,
            3082.933333333333, 1105.6,
            3038.133333333333, 1104.0,
            3033.333333333333, 1513.6,
            2550.133333333333, 1512.0,
            2546.933333333333, 1496.0,
            2542.133333333333, 1497.6,
            2542.133333333333, 1497.6,
            2538.933333333333, 1505.6,
            2503.733333333333, 1508.8,
            2503.733333333333, 1520.0,
            2487.733333333333, 1520.0,
            2487.733333333333, 1528.0,
            2162.933333333333, 1526.3999999999999,
            2162.933333333333, 1446.3999999999999,
            2071.733333333333, 1355.1999999999998,
            2088.533, 892.267,
            2074.133, 921.067,
            2070.933, 1348.267);

    f45Poly2
        .getPoints()
        .addAll(
            3361.333333333332, 883.1999999999999,
            3340.533333333332, 774.3999999999999,
            3334.133333333332, 774.3999999999999,
            3295.7333333333318, 548.8,
            3148.533333333332, 575.9999999999999,
            3135.733333333332, 559.9999999999999,
            3015.733333333332, 571.1999999999999,
            3015.733333333332, 582.4,
            2873.333333333332, 591.9999999999999,
            2871.733333333332, 582.4,
            2174.6666666666656, 582.4,
            2171.4666666666653, 734.3999999999999,
            2134.6666666666656, 737.5999999999999,
            2136.2666666666655, 843.1999999999999,
            2104.2666666666655, 847.9999999999999,
            2078.6666666666656, 884.8,
            2070.6666666666656, 1500.8,
            2565.0666666666657, 1502.3999999999999,
            2566.6666666666656, 1539.1999999999998,
            2965.0666666666657, 1540.8,
            2965.0666666666657, 1515.1999999999998,
            2984.2666666666655, 1515.1999999999998,
            2989.0666666666657, 1169.6,
            3001.8666666666654, 1169.6,
            3033.8666666666654, 1136.0,
            3032.2666666666655, 1094.3999999999999,
            3085.0666666666657, 1092.8,
            3085.0666666666657, 1081.6,
            3110.666666666665, 1084.8,
            3110.666666666665, 1065.6,
            3165.0666666666657, 1068.8,
            3165.0666666666657, 1078.3999999999999,
            3184.2666666666655, 1078.3999999999999,
            3185.8666666666654, 1064.0,
            3238.666666666665, 1068.8,
            3238.666666666665, 1076.8,
            3261.0666666666657, 1076.8,
            3261.0666666666657, 1065.6,
            3315.4666666666653, 1067.1999999999998,
            3315.4666666666653, 1072.0,
            3336.2666666666655, 1072.0,
            3342.666666666665, 929.5999999999999,
            3329.8666666666654, 926.3999999999999,
            3329.8666666666654, 894.3999999999999,
            3360.2666666666655, 887.9999999999999);

    f45Poly3
        .getPoints()
        .addAll(
            2117.0666666666657, 743.9999999999999,
            2123.4666666666653, 639.9999999999999,
            2149.0666666666657, 611.1999999999999,
            2149.0666666666657, 579.1999999999999,
            2848.2666666666655, 579.1999999999999,
            2848.2666666666655, 588.8,
            2995.4666666666653, 579.1999999999999,
            2995.4666666666653, 569.5999999999999,
            3117.0666666666657, 555.1999999999999,
            3129.8666666666654, 569.5999999999999,
            3273.8666666666654, 547.1999999999999,
            3392.7999999999984, 1076.8,
            3367.1999999999985, 1076.8,
            3365.5999999999985, 1065.6,
            3349.5999999999985, 1065.6,
            3344.7999999999984, 1072.0,
            3239.1999999999985, 1065.6,
            3239.1999999999985, 1075.1999999999998,
            3223.1999999999985, 1075.1999999999998,
            3223.1999999999985, 1064.0,
            3165.5999999999985, 1060.8,
            3165.5999999999985, 1076.8,
            3149.5999999999985, 1076.8,
            3144.7999999999984, 1056.0,
            3133.5999999999985, 1068.8,
            3096.7999999999984, 1068.8,
            3083.999999999998, 1076.8,
            3063.1999999999985, 1076.8,
            3066.3999999999987, 1089.6,
            3013.5999999999985, 1089.6,
            3013.5999999999985, 1132.8,
            2981.5999999999985, 1168.0,
            2970.3999999999987, 1168.0,
            2971.9999999999986, 1499.1999999999998,
            2142.1333333333314, 1497.6,
            2116.0, 844.8,
            2111.2, 1496.0);

    f45PolyL1
        .getPoints()
        .addAll(
            2146.1333333333337, 1537.0666666666657,
            2151.199999999998, 594.6666666666663,
            2848.7999999999984, 593.0666666666662,
            2994.3999999999983, 581.8666666666661,
            2991.199999999998, 567.466666666666,
            3120.7999999999984, 554.6666666666661,
            3120.7999999999984, 569.0666666666662,
            3272.7999999999984, 545.0666666666662,
            3392.799999999999, 1079.466666666666,
            3277.599999999999, 1069.866666666666,
            3114.399999999999, 1066.666666666666,
            3091.999999999999, 1077.866666666666,
            3069.599999999999, 1082.666666666666,
            3067.999999999999, 1092.2666666666662,
            3021.599999999999, 1092.2666666666662,
            3019.999999999999, 1506.666666666666,
            2534.133333333333, 1511.4666666666662,
            2532.533333333333, 1533.866666666666);

    f45PolyL2
        .getPoints()
        .addAll(
            2146.1333333333337, 1537.0666666666657,
            2151.199999999998, 594.6666666666663,
            2848.7999999999984, 593.0666666666662,
            2994.3999999999983, 581.8666666666661,
            2991.199999999998, 567.466666666666,
            3120.7999999999984, 554.6666666666661,
            3120.7999999999984, 569.0666666666662,
            3272.7999999999984, 545.0666666666662,
            3392.799999999999, 1079.466666666666,
            3277.599999999999, 1069.866666666666,
            3114.399999999999, 1066.666666666666,
            3091.999999999999, 1077.866666666666,
            3069.599999999999, 1082.666666666666,
            3067.999999999999, 1092.2666666666662,
            3021.599999999999, 1092.2666666666662,
            3019.999999999999, 1506.666666666666,
            2534.133333333333, 1511.4666666666662,
            2532.533333333333, 1533.866666666666);

    f15Poly1
        .getPoints()
        .addAll(
            3294.133333333332, 534.3999999999999,
            3346.933333333332, 771.1999999999998,
            3358.133333333332, 771.1999999999998,
            3369.333333333332, 851.1999999999998,
            3343.7333333333318, 851.1999999999998,
            3369.333333333332, 937.5999999999999,
            3382.133333333332, 937.5999999999999,
            3422.133333333332, 1094.3999999999999,
            3426.933333333332, 1094.3999999999999,
            3433.333333333332, 1121.6,
            3422.133333333332, 1444.8,
            3572.533333333332, 1447.9999999999998,
            3583.7333333333318, 1054.3999999999999,
            3694.133333333332, 1027.1999999999998,
            3682.933333333332, 982.3999999999999,
            3702.133333333332, 982.3999999999999,
            3702.133333333332, 972.8,
            3814.133333333332, 944.0,
            3810.933333333332, 921.5999999999999,
            3890.9333333333316, 902.3999999999999,
            3874.9333333333316, 796.8,
            3881.333333333332, 793.5999999999999,
            3962.9333333333316, 1064.0,
            3898.9333333333316, 1086.3999999999999,
            3892.533333333332, 1067.1999999999998,
            3618.933333333332, 1144.0,
            3652.533333333332, 1263.9999999999998,
            3930.9333333333316, 1184.0,
            3948.533333333332, 1233.6,
            3932.533333333332, 1243.1999999999998,
            3930.9333333333316, 1255.9999999999998,
            3918.133333333332, 1263.9999999999998,
            3892.533333333332, 1254.3999999999999,
            3806.133333333332, 1283.1999999999998,
            3862.133333333332, 1486.3999999999999,
            4046.133333333332, 1428.8,
            4004.533333333332, 1297.6,
            4031.7333333333318, 1268.8,
            4038.133333333332, 1292.8,
            4050.9333333333316, 1292.8,
            4062.133333333332, 1327.9999999999998,
            4098.933333333332, 1350.3999999999999,
            4122.933333333332, 1342.3999999999999,
            4142.133333333331, 1310.3999999999999,
            4134.133333333331, 1271.9999999999998,
            4143.733333333332, 1263.9999999999998,
            4031.7333333333318, 852.8,
            4158.133333333331, 816.0,
            4166.133333333331, 841.5999999999999,
            4231.733333333332, 827.1999999999998,
            4240.799999999998, 811.7333333333331,
            4389.5999999999985, 770.1333333333331,
            4397.5999999999985, 773.3333333333331,
            4397.5999999999985, 778.1333333333331,
            4463.199999999998, 763.7333333333331,
            4450.399999999998, 728.5333333333332,
            4583.199999999998, 688.5333333333332,
            4701.5999999999985, 1102.9333333333327,
            4717.5999999999985, 1099.733333333333,
            4728.799999999998, 1141.3333333333328,
            4760.799999999998, 1160.5333333333328,
            4800.799999999998, 1147.733333333333,
            4813.5999999999985, 1126.9333333333327,
            4803.999999999998, 1078.9333333333327,
            4815.199999999998, 1077.3333333333328,
            4803.999999999998, 1026.133333333333,
            4842.399999999998, 1014.9333333333332,
            4885.5999999999985, 1037.333333333333,
            4941.5999999999985, 893.3333333333331,
            4835.999999999998, 850.1333333333331,
            4786.399999999998, 949.3333333333331,
            4781.5999999999985, 954.1333333333331,
            4696.799999999998, 654.9333333333332,
            4687.199999999998, 656.5333333333332,
            4675.999999999998, 618.1333333333331,
            4690.399999999998, 611.7333333333331,
            4703.199999999998, 587.7333333333331,
            4675.999999999998, 480.53333333333313,
            4645.5999999999985, 462.93333333333317,
            4639.199999999998, 462.93333333333317,
            4464.799999999998, 266.1333333333331,
            4343.199999999998, 302.9333333333331,
            4362.399999999998, 363.7333333333332,
            4375.199999999998, 363.7333333333332,
            4384.799999999998, 406.9333333333331,
            4021.5999999999985, 499.73333333333306,
            4016.7999999999984, 480.53333333333313,
            3931.999999999998, 502.9333333333331,
            3896.7999999999984, 392.53333333333313,
            3786.93333333333, 422.9333333333331,
            3788.53333333333, 430.9333333333331,
            3782.13333333333, 430.9333333333331,
            3782.13333333333, 446.9333333333331,
            3794.93333333333, 446.9333333333331,
            3798.13333333333, 454.9333333333331,
            3761.3333333333303, 462.9333333333331,
            3758.13333333333, 453.3333333333331,
            3743.73333333333, 454.9333333333331,
            3743.73333333333, 462.9333333333331,
            3612.53333333333, 496.53333333333313,
            3606.13333333333, 486.9333333333331,
            3593.3333333333303, 486.9333333333331,
            3593.3333333333303, 498.13333333333316,
            3553.3333333333303, 506.13333333333316,
            3476.53333333333, 520.5333333333332,
            3470.13333333333, 486.9333333333331);

    f15Poly2L1L2
        .getPoints()
        .addAll(
            3285.8666666666654, 526.4,
            3333.8666666666654, 776.0,
            3341.8666666666654, 774.3999999999999,
            3404.2666666666655, 1078.3999999999999,
            3421.8666666666654, 1120.0,
            3413.8666666666654, 1433.6,
            3565.8666666666654, 1435.1999999999998,
            3573.8666666666654, 1054.3999999999999,
            3586.6666666666656, 1041.6,
            3685.8666666666654, 1019.2,
            3682.6666666666656, 1001.5999999999999,
            3743.4666666666653, 982.3999999999999,
            3737.0666666666657, 955.2,
            3802.6666666666656, 937.5999999999999,
            3801.0666666666657, 913.5999999999999,
            3887.4666666666653, 891.2,
            3863.4666666666653, 780.8,
            3868.2666666666655, 779.2,
            3959.4666666666653, 1054.3999999999999,
            3889.0666666666657, 1078.3999999999999,
            3884.2666666666655, 1060.8,
            3610.6666666666656, 1139.1999999999998,
            3620.2666666666655, 1179.1999999999998,
            3580.2666666666655, 1193.6,
            3602.6666666666656, 1267.1999999999998,
            3916.2666666666655, 1179.1999999999998,
            3914.6666666666656, 1161.6,
            3922.6666666666656, 1160.0,
            3938.6666666666656, 1225.6,
            3921.0666666666657, 1238.3999999999999,
            3921.0666666666657, 1249.6,
            3908.2666666666655, 1259.1999999999998,
            3885.8666666666654, 1246.3999999999999,
            3794.6666666666656, 1275.1999999999998,
            3852.2666666666655, 1476.8,
            3861.8666666666654, 1472.0,
            3861.8666666666654, 1478.3999999999999,
            3914.6666666666656, 1481.6,
            4041.0666666666657, 1443.1999999999998,
            3996.2666666666655, 1288.0,
            4004.2666666666655, 1281.6,
            4015.4666666666653, 1262.3999999999999,
            4025.0666666666657, 1284.8,
            4036.2666666666655, 1286.3999999999999,
            4052.2666666666655, 1329.6,
            4082.6666666666656, 1345.6,
            4125.866666666665, 1336.0,
            4137.066666666666, 1307.2000000000003,
            4124.2666666666655, 1259.1999999999998,
            4135.466666666665, 1254.3999999999999,
            4012.2666666666655, 840.0,
            4148.2666666666655, 801.5999999999999,
            4140.2666666666655, 769.5999999999999,
            4196.2666666666655, 755.2,
            4204.2666666666655, 772.8,
            4380.2666666666655, 723.2,
            4380.2666666666655, 710.3999999999999,
            4434.666666666665, 696.0,
            4441.066666666666, 716.8,
            4572.2666666666655, 681.5999999999999,
            4695.466666666665, 1099.2,
            4709.866666666665, 1097.6,
            4705.6, 1136.0,
            4747.2, 1155.2,
            4788.8, 1144.0,
            4803.2, 1113.6,
            4795.2, 1073.6,
            4804.8, 1070.4,
            4793.6, 1028.8,
            4840.0, 1014.4000000000001,
            4875.2, 1033.6,
            4942.4, 892.8,
            4833.6, 848.0,
            4779.2, 947.2,
            4686.4, 643.2,
            4678.4, 646.4000000000001,
            4672.0, 611.2,
            4681.6, 609.6000000000001,
            4694.4, 580.8,
            4668.8, 483.2,
            4641.6, 457.6,
            4633.6, 460.8,
            4564.8, 238.39999999999992,
            4456.0, 260.79999999999995,
            4513.6, 455.9999999999999,
            4515.2, 452.79999999999995,
            4542.4, 537.5999999999999,
            4516.8, 545.5999999999999,
            4491.2, 478.39999999999986,
            4419.2, 495.9999999999999,
            4384.0, 399.9999999999999,
            4020.8, 487.9999999999999,
            4025.6, 502.39999999999986,
            3926.4, 534.3999999999999,
            3870.4, 377.5999999999999,
            3764.8, 409.5999999999999,
            3772.8, 438.39999999999986,
            3466.133333333335, 516.8,
            3456.533333333335, 483.19999999999993);

    f15Poly3
        .getPoints()
        .addAll(
            3269.333333333335, 525.8666666666666,
            3394.133333333335, 1092.2666666666664,
            3408.533333333335, 1121.0666666666666,
            3403.733333333335, 1437.8666666666668,
            3550.933333333335, 1442.6666666666665,
            3552.533333333335, 1052.2666666666664,
            3565.333333333335, 1047.4666666666667,
            3672.533333333335, 1018.6666666666666,
            3667.733333333335, 1002.6666666666666,
            3731.733333333335, 989.8666666666666,
            3720.533333333335, 954.6666666666666,
            3789.333333333335, 938.6666666666666,
            3779.733333333335, 914.6666666666666,
            3867.733333333335, 890.6666666666666,
            3848.533333333335, 781.8666666666666,
            3886.933333333335, 882.6666666666666,
            3947.733333333335, 1065.0666666666666,
            3882.133333333335, 1087.4666666666667,
            3875.733333333335, 1071.4666666666667,
            3598.933333333335, 1149.8666666666668,
            3610.133333333335, 1188.2666666666664,
            3562.133333333335, 1205.8666666666668,
            3590.933333333335, 1285.8666666666668,
            3912.533333333335, 1185.0666666666666,
            3925.333333333335, 1228.2666666666664,
            3907.733333333335, 1234.6666666666665,
            3904.533333333335, 1242.6666666666665,
            3907.733333333335, 1250.6666666666665,
            3894.933333333335, 1255.4666666666667,
            3872.533333333335, 1245.8666666666668,
            3779.733333333335, 1273.0666666666666,
            3843.733333333335, 1477.8666666666668,
            3898.133333333335, 1477.8666666666668,
            4022.933333333335, 1442.6666666666665,
            3974.933333333335, 1290.6666666666665,
            3981.333333333335, 1287.4666666666667,
            3995.733333333335, 1258.6666666666665,
            4000.5333333333347, 1257.0666666666666,
            4016.5333333333347, 1290.6666666666665,
            4032.5333333333347, 1290.6666666666665,
            4042.133333333335, 1333.8666666666668,
            4072.5333333333347, 1353.0666666666666,
            4109.333333333335, 1338.6666666666665,
            4130.133333333335, 1305.0666666666666,
            4112.533333333335, 1266.6666666666665,
            4123.733333333335, 1261.8666666666668,
            4110.933333333335, 1215.4666666666667,
            4114.133333333335, 1212.2666666666664,
            4026.133333333335, 893.8666666666666,
            4014.933333333335, 895.4666666666666,
            4003.733333333335, 845.8666666666666,
            4144.533333333335, 802.6666666666666,
            4138.133333333335, 773.8666666666666,
            4186.133333333335, 764.2666666666665,
            4186.133333333335, 780.2666666666665,
            4237.333333333335, 765.8666666666666,
            4237.333333333335, 757.8666666666666,
            4318.933333333335, 735.4666666666666,
            4318.933333333335, 743.4666666666666,
            4365.333333333335, 727.4666666666666,
            4365.333333333335, 713.0666666666666,
            4421.333333333335, 693.8666666666666,
            4432.533333333335, 717.8666666666666,
            4558.933333333335, 684.2666666666665,
            4676.8, 1105.0666666666666,
            4692.8, 1105.0666666666666,
            4708.8, 1143.4666666666667,
            4736.0, 1159.4666666666667,
            4772.8, 1148.2666666666664,
            4787.2, 1122.6666666666665,
            4776.0, 1081.0666666666666,
            4790.4, 1073.0666666666666,
            4779.2, 1026.6666666666665,
            4817.6, 1015.4666666666666,
            4854.4, 1031.4666666666667,
            4918.4, 893.8666666666666,
            4811.2, 844.2666666666665,
            4764.8, 945.0666666666666,
            4758.4, 945.0666666666666,
            4672.0, 655.4666666666666,
            4660.8, 652.2666666666665,
            4649.6, 620.2666666666667,
            4665.6, 611.7333333333335,
            4678.4, 589.3333333333333,
            4644.8, 477.3333333333332,
            4622.4, 462.9333333333332,
            4612.8, 466.13333333333327,
            4436.8, 267.73333333333323,
            4513.6, 538.1333333333333,
            4494.4, 546.1333333333333,
            4472.0, 482.13333333333327,
            4404.8, 499.7333333333333,
            4398.4, 482.13333333333327,
            4404.8, 469.3333333333332,
            4398.4, 451.7333333333333,
            4390.4, 448.53333333333325,
            4390.4, 448.53333333333325,
            4369.6, 397.3333333333333,
            4268.8, 419.7333333333333,
            4268.8, 422.9333333333332,
            4137.6, 458.13333333333327,
            4139.2, 462.9333333333332,
            4000.0, 496.53333333333325,
            3990.4, 478.9333333333332,
            3907.2, 494.9333333333332,
            3875.2, 389.3333333333333,
            3763.1999999999994, 419.7333333333333,
            3775.999999999999, 448.53333333333325,
            3527.9999999999995, 501.3333333333332,
            3455.9999999999995, 517.3333333333333,
            3444.7999999999993, 486.9333333333332);

    shapiroBuilding = new ArrayList<BuildingRegion>();
    btmBuilding = new ArrayList<BuildingRegion>();
    towerBuilding = new ArrayList<BuildingRegion>();
    f15Building = new ArrayList<BuildingRegion>();
    f45Building = new ArrayList<BuildingRegion>();

    shapiroFloor1 = new BuildingRegion(shapiroPoly1, "Shapiro", "1");
    shapiroFloor2 = new BuildingRegion(shapiroPoly23, "Shapiro", "2");
    shapiroFloor3 = new BuildingRegion(shapiroPoly23, "Shapiro", "3");
    shapiroL1 = new BuildingRegion(shapiroPolyL1L2, "Shapiro", "L1");
    shapiroL2 = new BuildingRegion(shapiroPolyL1L2, "Shapiro", "L2");

    shapiroBuilding.add(shapiroFloor1);
    shapiroBuilding.add(shapiroFloor2);
    shapiroBuilding.add(shapiroFloor3);
    shapiroBuilding.add(shapiroL1);
    shapiroBuilding.add(shapiroL2);

    btmFloor1 = new BuildingRegion(btmPoly1, "BTM", "1");
    btmFloor2 = new BuildingRegion(btmPoly23, "BTM", "2");
    btmFloor3 = new BuildingRegion(btmPoly23, "BTM", "3");
    btmL1 = new BuildingRegion(btmPolyL1, "BTM", "L1");
    btmL2 = new BuildingRegion(btmPolyL2, "BTM", "L2");

    btmBuilding.add(btmFloor1);
    btmBuilding.add(btmFloor2);
    btmBuilding.add(btmFloor3);
    btmBuilding.add(btmL1);
    btmBuilding.add(btmL2);

    towerFloor1 = new BuildingRegion(towerPoly1, "Tower", "1");
    towerFloor2 = new BuildingRegion(towerPoly2, "Tower", "2");
    towerFloor3 = new BuildingRegion(towerPoly3, "Tower", "3");
    towerL1 = new BuildingRegion(towerPolyL1, "Tower", "L1");
    towerL2 = new BuildingRegion(towerPolyL2, "Tower", "L2");

    towerBuilding.add(towerFloor1);
    towerBuilding.add(towerFloor2);
    towerBuilding.add(towerFloor3);
    towerBuilding.add(towerL1);
    towerBuilding.add(towerL2);

    f15Floor1 = new BuildingRegion(f15Poly1, "15 Francis", "1");
    f15Floor2 = new BuildingRegion(f15Poly2L1L2, "15 Francis", "2");
    f15Floor3 = new BuildingRegion(f15Poly3, "15 Francis", "3");
    f15L1 = new BuildingRegion(f15Poly2L1L2, "15 Francis", "L1");
    f15L2 = new BuildingRegion(f15Poly2L1L2, "15 Francis", "L2");

    f15Building.add(f15Floor1);
    f15Building.add(f15Floor2);
    f15Building.add(f15Floor3);
    f15Building.add(f15L1);
    f15Building.add(f15L2);

    f45Floor1 = new BuildingRegion(f45Poly1, "45 Francis", "1");
    f45Floor2 = new BuildingRegion(f45Poly2, "45 Francis", "2");
    f45Floor3 = new BuildingRegion(f45Poly3, "45 Francis", "3");
    f45L1 = new BuildingRegion(f45PolyL1, "45 Francis", "L1");
    f45L2 = new BuildingRegion(f45PolyL2, "45 Francis", "L2");

    f45Building.add(f45Floor1);
    f45Building.add(f45Floor2);
    f45Building.add(f45Floor3);
    f45Building.add(f45L1);
    f45Building.add(f45L2);

    buildings = new ArrayList<ArrayList<BuildingRegion>>();

    buildings.add(towerBuilding);
    buildings.add(btmBuilding);
    buildings.add(shapiroBuilding);
    buildings.add(f15Building);
    buildings.add(f45Building);
  }

  public String getBuilding(Point2D p, String floor) {

    // boolean inAnyBuilding = false;

    // check all buildings
    for (ArrayList<BuildingRegion> building : buildings) {
      boolean inThisBuilding = false;

      // all floors in building. TODO only check the building regions corresponding to this floor
      for (BuildingRegion buildingFloor : building) {
        boolean onThisFloor = buildingFloor.isWithinRegion(p, floor);
        inThisBuilding |= onThisFloor;
        // inAnyBuilding |= onThisFloor;
      }
      if (inThisBuilding) {
        return (building.get(0).getBuildingName());
        // System.out.println("I'm in: " + building.get(0).getBuildingName());
      }
    }
    return "Outside";
  }
}
